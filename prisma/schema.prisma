generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model conversation {
  id                   String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name                 String?
  description          String?
  creator              String                 @db.VarChar(255)
  created_at           BigInt
  updated_at           BigInt
  user                 user                   @relation(fields: [creator], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversation_blocked conversation_blocked[]
  conversation_log     conversation_log[]
  conversation_member  conversation_member[]
  message              message[]
}

model conversation_blocked {
  conversation_id String       @db.Uuid
  user_id         String       @db.VarChar(255)
  created_at      BigInt?
  updated_at      BigInt?
  conversation    conversation @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([conversation_id, user_id])
}

model conversation_log {
  id              String                 @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  conversation_id String                 @db.Uuid
  type            conversation_log_type?
  by              String                 @db.VarChar(255)
  created_at      BigInt
  user            user                   @relation(fields: [by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  conversation    conversation           @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model conversation_member {
  conversation_id     String                  @db.Uuid
  user_id             String                  @db.VarChar(255)
  role                conversation_role?      @default(member)
  theme               conversation_theme?     @default(system)
  created_at          BigInt
  updated_at          BigInt
  notification_type   conversation_noti_type? @default(normal)
  notification_custom String?                 @db.VarChar(255)
  conversation        conversation            @relation(fields: [conversation_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                user                    @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([conversation_id, user_id])
}

model message {
  id             String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  sender         String           @db.VarChar(255)
  destination    String           @db.Uuid
  created_at     BigInt
  updated_at     BigInt
  type           message_type?    @default(text)
  content        String?
  conversation   conversation     @relation(fields: [destination], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user             @relation(fields: [sender], references: [id], onDelete: NoAction, onUpdate: NoAction)
  message_status message_status[]
}

model message_status {
  message_id String               @db.Uuid
  user_id    String               @db.VarChar(255)
  status     message_status_type?
  updated_at BigInt
  message    message              @relation(fields: [message_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user       user                 @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([message_id, user_id])
}

model notifications {
  id                 String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content            String?
  type               notification_type?
  status             notification_status?
  created_at         BigInt
  updated_at         BigInt
  notifications_user notifications_user[]
}

model notifications_user {
  user_id         String        @db.VarChar(255)
  notification_id String        @db.Uuid
  notifications   notifications @relation(fields: [notification_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user            user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, notification_id])
}

model user {
  id                   String                 @id @db.VarChar(255)
  email                String                 @db.VarChar(255)
  email_verified       Boolean?               @default(false)
  first_name           String                 @db.VarChar(255)
  last_name            String?                @db.VarChar(255)
  username             String                 @unique @db.VarChar(255)
  created_at           BigInt
  updated_at           BigInt
  dob                  BigInt                 @default(0)
  avatar               String?
  cover                String?
  gender               gender?
  conversation         conversation[]
  conversation_blocked conversation_blocked[]
  conversation_log     conversation_log[]
  conversation_member  conversation_member[]
  message              message[]
  message_status       message_status[]
  notifications_user   notifications_user[]
  user_log             user_log[]
  user_status          user_status[]
}

model user_log {
  id         String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_id    String         @db.VarChar(255)
  created_at BigInt?
  action     String?
  device     String?        @db.VarChar(255)
  type       user_log_type?
  user       user           @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user_status {
  id         String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  status     user_status_type?
  updated_at BigInt
  user_id    String            @db.VarChar(255)
  user       user              @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum conversation_log_type {
  add_member
  update_info
  update_admin
  update_avatar
  delete_member
  block_member
}

enum conversation_noti_type {
  normal
  no_noti
  h3
  h2
  h1
  m15
  custom
}

enum conversation_role {
  member
  admin
  optional
}

enum conversation_theme {
  system
  halloween
  tet
}

enum gender {
  male
  female
}

enum message_status_type {
  sent
  received
  seen
}

enum message_type {
  text
  audio
  video
  image
  system
  sticker
}

enum notification_status {
  sent
  received
  seen
}

enum notification_type {
  a
}

enum user_log_type {
  add
  delete
  update
}

enum user_status_type {
  online
  offline
  custom
}
